<?php
/**
 * Created by PhpStorm.
 * User: Yeah
 * Date: 2018/10/28
 * Time: 16:10
 */
namespace app\api\controller;
use app\common\Api;
use think\Db;
class Tips extends Api {
    public function _initialize()
    {
       parent::_initialize(); // TODO: Change the autogenerated stub
    }
    public function set_info(){
        $data=[
            'nickname'=>preg_replace("#(\\\ud[0-9a-f]{3})#i", "", input('nickname')),
            'country'=>input('country'),
            'province'=>input('province'),
            'city'=>input('city'),
            'sex'=>input('sex'),
            'avatar_url'=>input('avatar_url')
        ];
        $res=model('User')->save($data,['id'=>$this->user->id]);
        if($res)return json(['code'=>0,'msg'=>'ok']);
        return json(['code'=>1,'msg'=>'操作失败']);
    }

    /**
     * 发送短信
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function send_sms(){
        $data=['phone'=>input('phone')];
        $res=$this->validate([['phone','require|regex:^[1][0-9]{10}$', '电话不能为空|请输入正确的手机号']],$data);
        if($res!==true)return json(['code'=>1,'msg'=>$res]);
        $argc=Db::name('SmsSetting')
            ->where(['acid'=>$this->acid])
            ->order('id desc')
            ->find();
        if(empty($argc))return json(['code'=>1,'msg'=>'平台没有配置短信参数']);
        $sms=new \aliyun\aliyun($argc);
        $msg=$sms->code($data['phone']);
        if(!$msg)return json(['code'=>1,'msg'=>"平台短信配置错误提示:{$sms->ErrorMsg}"]);
        $data=[
            'uid'=>$this->user->id,
            'acid'=>$this->acid,
            'phone'=>$data['phone'],
            'msg'=>$msg,
            'create_time'=>time(),
            'genre'=>'code'
        ];
        $res=Db::name('SmsLog')->insert($data);
        if($res)return json(['code'=>0,'msg'=>'发送成功']);
        return json(['code'=>1,'msg'=>'发送失败']);
    }

    /**
     * @param $phone
     * @param $code
     * @return \think\response\Json
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function binding($phone,$code){
        $data=Db::name('SmsLog')
            ->where(['uid'=>$this->user->id,'acid'=>$this->acid,'phone'=>$phone,'genre'=>'code'])
            ->where(['create_time'=>['gt',(time()-300)],'msg'=>$code,'is_use'=>0])
            ->order('id desc')
            ->find();
        if(!$data)return json(['code'=>1,'msg'=>'验证码错误']);
        $res=model('User')->save(['mobile'=>$phone],['id'=>$this->user->id]);
        if($res){
            Db::name('SmsLog')->where(['id'=>$data['id']])->update(['is_use'=>1]);
            return json(['code'=>0,'msg'=>'绑定成功']);
        }
        return json(['code'=>1,'msg'=>'绑定失败']);
    }
    public function feedback(){
        $data=[
            'uid'=>$this->user->id,
            'acid'=>$this->acid,
            'content'=>input('content'),
            'phone'=>input('phone')
        ];
        $res=model('Feedback')
            ->validate([
                ['content','require|min:10','内容不能为空|内容不能小于10个字'],
                ['mobile','regex:^[1][0-9]{10}$', '请输入正确的手机号'],
            ])
            ->save($data);
        $err_msg=!model('Feedback')->getError()&&'反馈失败';
        if(!$res)return json(['code'=>1,'msg'=>$err_msg]);
        return json(['code'=>0,'msg'=>'谢谢您的反馈']);
    }
    public function user_info(){
        $data=[
            'nickname'=>$this->user->nickname,
            'avatar_url'=>$this->user->avatar_url,
            'mobile'=>$this->user->mobile
        ];
        return json(['code'=>0,'msg'=>'ok','data'=>$data]);
    }
    public function form_id($form_id){
        Db::name('From')->insert([
            'acid'=>$this->acid,
            'uid'=>$this->user->id,
            'form_id'=>$form_id,
            'genre'=>'from_id',
            'wx_openid'=>$this->user->wx_openid,
            'create_time'=>time()
        ]);
        return json(['code'=>0,'msg'=>'ok']);
    }
}